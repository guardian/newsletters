import { sheets_v4 as sheetsV4 } from 'googleapis';
import { prepareRows } from '../googleNewsletterSheets';

describe('prepare rows', () => {
	it('rows', () => {
		const want = [
			[
				'1',
				'2',
				'3',
				undefined,
				'5',
				'6',
				'7',
				'8',
				'9',
				'10',
				'11',
				'12',
				'13',
				'on row 1 and 2',
			],
			[
				'1',
				'2',
				'3',
				'not filtered',
				'5',
				'6',
				'7',
				'8',
				'9',
				'10',
				'11',
				'12',
				'13',
				'on row 1 and 2',
			],
			[
				'1',
				'2',
				'3',
				'4',
				'5',
				'6',
				'7',
				'8',
				'9',
				'10',
				'11',
				'12',
				'13',
				'on row 3 and 4',
			],
			[
				'1',
				'2',
				'3',
				'4',
				'5',
				'6',
				'7',
				'8',
				'9',
				'10',
				'11',
				'12',
				'13',
				'on row 3 and 4',
			],
		];
		const rows = [
			[],
			{
				values: [
					{ formattedValue: '1' },
					{ formattedValue: '2' },
					{ formattedValue: '3' },
					{
						formattedValue: 'filtered',
						userEnteredFormat: {
							textFormat: { foregroundColor: { red: 1 } },
						},
					},
					{ formattedValue: '5' },
					{ formattedValue: '6' },
					{ formattedValue: '7' },
					{ formattedValue: '8' },
					{ formattedValue: '9' },
					{ formattedValue: '10' },
					{ formattedValue: '11' },
					{ formattedValue: '12' },
					{ formattedValue: '13' },
					{ formattedValue: 'on row 1 and 2' },
				],
			} as sheetsV4.Schema$RowData,
			{
				values: [
					{ formattedValue: '1' },
					{ formattedValue: '2' },
					{ formattedValue: '3' },
					{
						formattedValue: 'not filtered',
						userEnteredFormat: {
							textFormat: { foregroundColor: { blue: 1 } },
						},
					},
					{ formattedValue: '5' },
					{ formattedValue: '6' },
					{ formattedValue: '7' },
					{ formattedValue: '8' },
					{ formattedValue: '9' },
					{ formattedValue: '10' },
					{ formattedValue: '11' },
					{ formattedValue: '12' },
					{ formattedValue: '13' },
					{ formattedValue: '' },
				],
			} as sheetsV4.Schema$RowData,
			{
				values: [
					{ formattedValue: '1' },
					{ formattedValue: '2' },
					{ formattedValue: '3' },
					{ formattedValue: '4' },
					{ formattedValue: '5' },
					{ formattedValue: '6' },
					{ formattedValue: '7' },
					{ formattedValue: '8' },
					{ formattedValue: '9' },
					{ formattedValue: '10' },
					{ formattedValue: '11' },
					{ formattedValue: '12' },
					{ formattedValue: '13' },
					{ formattedValue: 'on row 3 and 4' },
				],
			} as sheetsV4.Schema$RowData,
			{
				values: [
					{ formattedValue: '1' },
					{ formattedValue: '2' },
					{ formattedValue: '3' },
					{ formattedValue: '4' },
					{ formattedValue: '5' },
					{ formattedValue: '6' },
					{ formattedValue: '7' },
					{ formattedValue: '8' },
					{ formattedValue: '9' },
					{ formattedValue: '10' },
					{ formattedValue: '11' },
					{ formattedValue: '12' },
					{ formattedValue: '13' },
					{ formattedValue: '' },
				],
			} as sheetsV4.Schema$RowData,
		] as sheetsV4.Schema$RowData[];
		const got = prepareRows(rows);
		expect(got).toEqual(want);
	});
});
